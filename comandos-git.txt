git init
    Inicializa el repositorio en la carpeta local

git add [nombre-fichero]
    Agrega al Stage el o los archivos indicados

git commit -m "[mensaje de commit]
    Realiza un commit al repositorio principal

git push
    Manda los cambios y archivos a la nube

git fetch
    Nos permite traer cambios y archivo de la nube a nuestra computadora

git merge [rama-a-traer]
    Sirve traer los cambios de una rama a la rama en donde nos encontramos

git log --oneline --decorate --graph
    --oneine [Nos permite ver los commit que se han hecho de manera corta]
    --decorate [Coloca pequeñas decoraciones ue hacen la lectura más facil]
    --graph [Genera un pequeño grafico de lineas simulando los commit y merges que se han hecho]

git tag -a [nombre-del-tag] -m ["Mensaje del tag entre comillas"] [id corto del commit al que se le quiere colocar el tag]
    Ejemplo: git tag -a v0.1 -m "Primera versión beta" 1auys5g
    En este caso -a nos ayuda a indicar que estamos "agregando" un tag nuevo

git show-ref --tags
    Permite visualizar los tags existentes junto con su referencia de en donde se encuentra en git.

git push origin --tags
    Sirve para enviar a github los tags

git tag -d [nombre-del-tag]
    El -d significa "deleate" y sirve para borrar un tag de manera local

git push origin :refs/tags/[nombre-del-tag-a-borrar]
    Sirve para borrar el tag en el repositorio de Github

git clone [url]
    Nos permite descargar un repositorio completo desde github

git rebase [rama-destino]
    Funciona para fusionar dos ramas, debemos colocarnos en la rama que queremos llevar a otra, por ejemplo: Nos colocamos en DEV para enviar a MAIN, al usar el comando lo que va a realizar es que agregar la rama externa a la indicada pero sin mantener le historial, es decir, nunca se vera que se creo una rama extra y parecerá que todo se hizo en la rama destino, ES UNA MALA PRÁCTICA USAR ESTE COMANDO

git stash
    Nos permite agregar todos los cambios que no estan agregados al stage de git en un estado temporal para que al movernos a alguna otra rama no se pierdas dichos cambios

git stash pop
    Nos permite una vez creado el fichero temporal de stash poder regresar a este para ver lo que tenemos en wip (work in process)

git stash drop
    Nos pemrite eiminar un stash para descartar los cambios que hemos hecho.

git stash branch [nombre-nueva-rama]
    Permite crear una nueva rama con los cambios realizados sin afectar la rama actual de trabajo

git clean --dry-run
    En caso de que se hayan creado archivos innecesarios o repeditos en nuestro proyecto git clean nos permite visualizarlos, al usar el comando con --dry-run nos dara una vista previa de las acciones que se van a realizar

git clean -f
    La opción -f en el comando de git clean nos permite realizar los cambios previsto con git clean --dry-run y realizar el borrado de los archivos innecesarios.

git commit --amend
    Este atributi nos permite corregir algun cambio que olvidamos hacer a un commit ya realizado, el procedimiento es que una vez hecho el ultimo commit, al no haber realizado el cambio que se nos olvido, procedemos a realizar el cambio, una vez hecho eso agregamos los cambios usando [add] y posteriormente usamos git commit --amend, esto guardara los cambios olvidados dentro del mismo commit ya hecho con antlación.

git reflow [@HEAD o el Hash]
    Nos permite ver TODOS Y CADA UNO  de los cambios y commits que se han realizado al proyecto aún si se ha hecho algun reset hard, en este log todos los cambios hasta las acciones de borrado de ramas, resets se ve reflejado, para visualizar el estado de ese estado se usa el comando checkout e indicamos ya sea el Head o el Hash, una vez que confirmamos cual es el commit a partir del cual queremos dejar nuestro proyecto usamos el comando RESET ya sea en hard o soft segun lo que queramos... NOTA: RESET solo debe usarse en caso de una verdadera emergencia.

git grep [argumento-a-buscar]
    Nos permite realizar una busqueda dentro de los archivos contenidos en un repositorio.

        -n      | Nos coloca el número de linea dentro del archivo en donde se encuentra la coincidencia

        -c      | Nos realiza un conteo de cuantas veces es usado el termino buscado dentro de cada archivo

git log -S
    Nos sirve para realizar busquedas pero dentro de los diferentes commits.

git shortlog
    Permite ver los commits que se han realizado en el proyecto, agrupandolos por persona.

        -sn     | Nos muestra solamente los nombres y el número de commits realizado por persona.

        -sn --all   | Muestra los nombre y el total de commits realizados por cada persona, incluyendo los commits borrados.

        -sn --all --no-merges  | Muestra los nombre y el total de commits realizados por cada persona, incluyendo los commits borrados, PERO sin incluir os merge.

git config --global alias.[nombre-del-alias-a-usar] "[comando-a-reemplazar]"
    Nos permite crear un alias a algun comando en la configuración global.

git blame [nombre-archivo]
    Nos permite ver los cambios que realizo un usuario en determinado archivo.
        -c      | Si le agregamos el atributo -c nos lo indenta por columna para que sea más legible.
        -L númLinea,númLinea]   | nos permite ver el autor del rango de lienas indicada.

git [nombre-commando] --help
    Nos abre una pestaña en un navegador con más información sobre como usar un comando.

git branch -r
    Permite visualizar cuales branch se encuentran en el repositorio remoto

git branch -a
    Presenta los branch remotos en rojo, los locales en blanco y con un asterisco el branch en el que nos encontramos actualmente.